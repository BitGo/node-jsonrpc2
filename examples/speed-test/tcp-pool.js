// Generated by CoffeeScript 1.4.0
(function (){
  var async, connCnt, onEnd, rpc, server, socketClient, start, _, _results;

  _ = require('underscore');

  async = require('async');

  rpc = require('./../../src/jsonrpc');

  server = rpc.Server.create();

  server.on('error', function (err){
    return console.log(err);
  });

  server.expose('add', function (args, opts, callback){
    return callback(null, args[0] + args[1]);
  });

  server.listenRaw(8089, 'localhost');

  start = void 0;

  connCnt = process.argv[2] || 1;

  socketClient = rpc.Client.create(8089, 'localhost');

  async.map((function (){
    _results = [];
    for (var _i = 0; 0 <= connCnt ? _i <= connCnt : _i >= connCnt; 0 <= connCnt ? _i++ : _i--) { _results.push(_i); }
    return _results;
  }).apply(this), (function (data, next){
    return socketClient.connectSocket(function (err, conn){
      return next(err, conn);
    });
  }), function (err, pool){
    var doCall, _j, _results1;
    doCall = function (data, next){
      var conn;
      conn = pool.shift();
      pool.push(conn);
      return conn.call('add', [data, data], next);
    };
    start = new Date();
    return async.forEachLimit((function (){
      _results1 = [];
      for (_j = 0; _j <= 10000; _j++) { _results1.push(_j); }
      return _results1;
    }).apply(this), 10, doCall, onEnd);
  });

  onEnd = function (){
    var child, exec;
    console.log('');
    console.log('End in ' + ((new Date()) - start) + 'ms');
    exec = require('child_process').exec;
    child = exec('netstat -putone |grep TIME_WAIT |wc -l', function (error, stdout, stderr){
      if (error) {
        console.error(error);
      }
      console.log('netstat -putone |grep TIME_WAIT |wc -l');
      console.log(stdout);
      return console.error(stderr);
    });
  };

  /*
   End in 1079ms
   netstat -putone |grep TIME_WAIT |wc -l
   0
   */

}).call(this);
